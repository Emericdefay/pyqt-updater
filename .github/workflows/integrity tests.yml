name: Python CI


on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  UPLOAD_URL: ""

jobs:
  test-and-release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r wrkflw_reqs.txt

    - name: Test with unittest
      run: |
        python -m unittest ./app/launcher.py

    - name: Get version
      id: linux-get-env-vars
      run: |
        # Vérifier si une mise à jour est disponible
        echo "VERSION=$(cat version.txt)" >> $GITHUB_OUTPUT
        echo "APP_NAME=$(python -c 'from app.launcher import get_app_name; print(get_app_name())')" >> $GITHUB_OUTPUT

    - name: Get Lastchange
      id: get_changelog
      run: |
        echo "::set-output name=value::$(echo -e $(cat LASTCHANGE.md))"

    - name: Create Release
      id: create_release
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'merge')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.linux-get-env-vars.outputs.VERSION }}
        release_name: Release ${{ steps.linux-get-env-vars.outputs.VERSION }}
        body: |
          Changes in this Release:
          ${{ steps.get_changelog.outputs.value }}
        draft: false
        prerelease: false

    - name: Export var
      run: |
        echo "UPLOAD_URL=$(echo "${{ steps.create_release.outputs.upload_url }}" | sed 's/{[^{}]\+}//')" >> $GITHUB_ENV

    - name: transfert var to txt
      run: |
        echo "${{ env.UPLOAD_URL}}" > upload_url_var.txt

    - name: Upload var on artifact
      uses: actions/upload-artifact@v1
      with:
        name: shares
        path: upload_url_var.txt
      
  build-exe-on-release:
    needs: test-and-release
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Download math result for job 1
      uses: actions/download-artifact@v1
      with:
        name: shares

    - name: bash
      id: load_upload_url
      run: |
        echo "::set-output name=upload_url::$(echo $(cat shares/upload_url_var.txt))"

    - name: check var
      id: geturl
      run: |
         echo "${{ steps.load_upload_url.outputs.upload_url }}"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Get app name
      id: win_app_name
      run: |
        # echo  APP_NAME=$(python -c 'from app.launcher import get_app_name; print(get_app_name())') >> $GITHUB_OUTPUT
        echo "APP_NAME=$(python -c 'from app.launcher import get_app_name; print(get_app_name())')" >> $env:GITHUB_OUTPUT

    - name: Run pyinstaller for launcher
      run: |
        python -m PyInstaller  launcher.spec
    - uses: actions/upload-artifact@v2
      with:
        name: launcher
        path: ./dist/launcher.exe

    - name: Run pyinstaller for app
      run: |
        python -m PyInstaller ${{ steps.win_app_name.outputs.APP_NAME }}.spec
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.win_app_name.outputs.APP_NAME }}
        path: ./dist/${{ steps.win_app_name.outputs.APP_NAME }}.exe

    - name: Upload asset launcher
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'merge')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: "${{ steps.load_upload_url.outputs.upload_url }}{?name,label}"
        asset_path: dist/launcher.exe
        asset_name: launcher.exe
        asset_content_type: application/zip

    - name: Upload asset ${{ steps.win_app_name.outputs.APP_NAME }}
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'merge')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: "${{ env.UPLOAD_URL }}{?name,label}"
        asset_path: dist/${{ steps.win_app_name.outputs.APP_NAME }}.exe
        asset_name: ${{ steps.win_app_name.outputs.APP_NAME }}.exe
        asset_content_type: application/zip

  verify_success:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [test-and-release, build-exe-on-release]
    steps:
    
    - uses: actions/checkout@v2
    - name: Delete Release on Failure
      if: failure() && steps.create_release.outputs.id
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        delete_version: ${{ steps.create_release.outputs.tag_name }}
